     +--------------------------+
     | CS 140                   |
     | PROJECT 2: USER PROGRAMS |
     | DESIGN DOCUMENT          |
     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Song Han <songhan@stanford.edu>
Jinchao Ye <jcye@stanford.edu>
Bo Wang <bowang@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

FirstName LastName: contribution
FirstName LastName: contribution
FirstName LastName: contribution

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

There's no change of data structures for argument passing

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The call stack of the program is as following:
main() -> run_actions(argv)
run_actions() -> run_task(argv)
run_task() -> process_wait(process execute(task))

Curently process_execute() will creat a thread that runs start_process().
Frist, the thread's name should be the first word of the command line,
thus we implement a function get_first_word() to extract the first word form 
the command line as the user program's name.

Inside start_process() it calls load(*filename, **esp,...), we implement a 
procedure argument_passing(const char *filename, void **esp)  to extract 
all the arguments from filename and set up the stack inside this fuction. 
The procedure is as follows:

--save a copy of the filename as cmd_line
--each char is exactly 1 byte, find total number of bytes for the argument, 
  and find the total argument count (argc). That's done by find the number
  of tokens seperated by the delimiter " " in the cmd_line. 
         for (token = strtok_r (s, " ", &save_ptr); token != NULL;
               token = strtok_r (NULL, " ", &save_ptr))
			   cnt++; 
			   length+=strlen(token)+1;			   
			   //note: s must be modifiable

--if the total stack space exceed's a page, return false			   

--ROUNRD_UP the cmd_line's length to multiples of 4 Byte as new length

--decrease esp by length, set this as the start address of arg_data

--decrease esp by the (number of arguments+1)*sizeof(char *). 
   (The reason for +1 is due to putting a zero at the end of the pointers).
  -Set this adress as arg_pointer

--iterate the cmd_line again by strtok(), for each token
  -fill the argument's address into arg_pointer
  -fill the argument string into arg_data
  -update the arg_data by increasing the string length+1
  -update the arg_pointer by increasing it sizeof(char *)
  
--save the previous esp as argv, decrease esp by sizeof(char **)
  -fill in esp's value as the address of argv[0]
   
--decrease esp by sizeof(int)
  -fill in esp's value as argc
  
--decrease esp by sizeof(void *)
  -fill in esp's value as the fake return address 0
   

   
--
---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
