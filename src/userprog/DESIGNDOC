     +--------------------------+
     | CS 140                   |
     | PROJECT 2: USER PROGRAMS |
     | DESIGN DOCUMENT          |
     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Song Han <songhan@stanford.edu>
Jinchao Ye <jcye@stanford.edu>
Bo Wang <bowang@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

None. But we built PA2 on top of PA1 and things work great :-)

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

Song Han: argument passing, process exit status, system calls, design doc
Jinchao Ye: design doc
Bo Wang: accessing user memory, process exit status, system calls, design doc

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

None.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In <process.h>
  #define MAX_FILE_LENGTH 16   /* Max length of file name */

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

// TODO: the statement of following algorithm doesn't sound very clear to me
          can you itemize it?
// TODO: how can you make sure that the first word of the command line has fewer
         than 15 characters?
         for example: /path/to/the/bin/can/be/extremely/long/like/this/program

The algorithm is as follows:
process_execute() creates a thread that runs start_process().
First, the thread's name should be the first word of the command line,
thus we implement a function get_first_word() to extract the first word form 
the command line as the user program's name. It's limited to 15 characters.

Inside start_process() it calls load(*filename, **esp,...), we implement a 
procedure argument_passing(const char *filename, void **esp) to extract 
all the arguments from filename and set up the stack inside this function. 
The procedure is as follows:

--save a copy of the filename as cmd_line.
--*To ensure the elements of argv[] to be in the right order*, we iterates the 
   arguments twice: in the first run we get the argc, in the second run we 
   actually write them to stack. There's a trade-off of time and space.
   
--Each char is exactly 1 byte, find total number of bytes for the argument, 
   and find the total argument count (argc). That's done by find the number of
   tokens separated by the delimiter " " in the cmd_line with strtok_r function.

--*To avoid overflowing the stack page*, we check if the total stack space 
   exceeds a page, must return false if so:
   if (mem_size + (argc + 1) * sizeof(char*) + sizeof(char**) + sizeof(int)
      > PGSIZE)   return false;		   

--ROUNRD_UP the cmd_line's length to multiples of 4 Byte as new length

--Decrease esp by length, set this as the start address of arg_data

--Decrease esp by the (number of arguments+1)*sizeof(char *). 
   -The reason for +1 is due to putting a zero at the end of the pointers.
   -Set this address as arg_pointer

--Iterate the cmd_line again by strtok(), for each token
  -fill the argument's address into arg_pointer
  -fill the argument string into arg_data
  -update the arg_data by increasing the string length+1
  -update the arg_pointer by increasing it sizeof(char *)
  
--save the previous esp as argv, decrease esp by sizeof(char **)
  -fill in esp's value as the address of argv[0]
   
--decrease esp by sizeof(int)
  -fill in esp's value as argc
  
--decrease esp by sizeof(void *)
  -fill in esp's value as the fake return address 0


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The difference between strtok_r() and strtok() is the way they save the 
pointer: strtok() saves the previous location in an internal static variable,
which is unsafe if preempted. Another process may race this variable at the
same time. In comparison, strtok_r() saves the pointer to an externally 
specified location, i.e. char **save_ptr. This solves the race condition.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The Unix approach is safer. When processing the argument in the shell, we
are doing this in user mode. However, when processing the arguments in the
pintos OS, we are doing this in kernel mode. The code executed in the kernel
mode has more *privileges* than in the user mode, such as changing the state 
of the current machine, therefore could lead to chances of being hacked by 
malicious command. 

The Unix approach also allows for resolution of relative paths, since the shell
has more information about the executing environment. 
For example, ~/abc or ../../abc



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In <thread.h>

  #define FILE_HDL_SIZE 16              /* Default size of file handlers */

  struct thread
    {
      /* Omit original members */
      ...
      bool is_kernel;                   /* True if this is a kernel process */
      bool in_syscall;                  /* True if thread is in system call */
      struct exit_status *exit_status;  /* Exit status of this thread */
      struct list child_exit_status;    /* List of child process' exit status */
      struct lock list_lock;            /* Lock on child exit status list  */
      struct file **file_handlers;      /* File handler array */
      int file_handlers_size;           /* Size of allocated file handlers */
      int file_handlers_num;            /* Num of current file handlers */
      struct file *process_file;        /* File of this current process */
    };

  /* Exit status of a process, including exit_value and other status */
  struct exit_status
    {
      int pid;                          /* Process Id. Same as tid in Pintos */
      int exit_value;                   /* Exit value */
      struct semaphore sema_wait;       /* Semaphore to sync on wait() */
      int ref_counter;                  /* Reference counter for release */
      struct lock counter_lock;         /* Lock on accessing ref_counter */
      struct list_elem elem;            /* List element for exit_status list */
      struct lock *list_lock;           /* Lock on list modification */
    };
 
  /* Load status of a process */
  struct load_status
    {
      struct semaphore sema_load;       /* Semaphore to sync on load() */
      bool load_success;                /* True if load successfully */
      char *cmd_line;                   /* Command line to launch the process */
      struct thread *parent_thread;     /* Pointer to the parent thread */
    };

In <syscall.c>
  struct lock global_lock_filesys;      /* Global lock for file system*/


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

For each thread, we maintain an array of pointers which point to the file
struct that they have opened. This array is dynamically expanded when
the array is full. The initial size is set as 16.

Each file descriptor act as an index to the file pointer array. When we open 
a file, we first check if there is enough space in the pointer array, if not, we 
double the size. Otherwise we search from the beginning (which is index 2 
since index 0 and 1 are reserved for STDIN and STDOUT) for an empty 
position to put this file pointer, and return this index as the file descriptor.

The file descriptors are unique within a single process. Since file descriptor
is just an index number, different process may use the same file descriptor 
pointing to different files.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

During syscalls, the user program pass its data to kernel by pointers. Before
dereferencing the pointer, we pass the pointer to a function valid_vaddr_range
to check the validity of this pointer. There are three steps:

[Pointer check]
1. If the pointer is NULL, return false
2. If the pointer or pointer + size points kernel virtual memory space
   is above PHYS_BASE, return false.
3. Since code starts from 0x0804800, if the pointer is lower than this value,
   return false.
// TODO: where does the following line come from?
4. If the pointer points to unmapped virtual memory. This is done by 
   calling pagedir_get_page function in pagedir.c. If it returns false, then 
   it means that this page is unmapped.

If the pointer points to unmapped or unallocated virtual memory, a page fault is
triggered. We handle this scenario in the page_fault() system call.

// TODO: do we need this?
[File descriptor check]
Another thing to verify is the file descriptors.
We implemented the function valid_file_handler to do this. This
function takes a thread and a file descriptor. It first check the file 
descriptor is within the range of current thread's file_handlers_size, then 
we check if the thread's file_handlers[fd] is NULL. For both cases we return 
false meaning the file descriptor passed by the user is invalid.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

The worst case is that the full page of data spans two pages, therefore the OS
must check twice: both the beginning and the end of the data to make sure that
both of them points to a page that was mapped. 

So it is the case when we copy only 2 bytes of data: they could also span two
pages. If so, both the beginning and the end have to be checked. So in both 
cases, we have to check twice to be robust. 

One possible solution is to implement the check inside page_fault() function.
If every reference is mapped, then life is easy and we needn't pay the overhead
of checking. If page fault did happen, then we only have to handle these edge
cases, which is rare.

//TODO: should say more.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Each process has an exit_status struct pointed by a member in the thread struct.
As a recap, the exit_status struct is copied again below.

/* Exit status of a process */
struct exit_status
  {
    int pid;                            /* Process Id. Same as tid in Pintos */
    int exit_value;                     /* Exit value */
    struct semaphore sema_wait;         /* Semaphore to sync on wait() */
    int ref_counter;                    /* Reference counter for release */
    struct lock counter_lock;           /* Lock on accessing ref_counter */
    struct list_elem elem;              /* List element for exit_status list */
    struct lock *list_lock;             /* Lock on list modification */
  };

This struct might exist even if the corresponding process has exited.
If a process exists after the termination of its parent process, its
exit_status struct is released when this process exits.
If a process exits when its parent process is still alive, it writes the 
exit_value to this exit_status struct. This struct is only released 
when the parent thread exits.

The ref_counter denotes the number of processes related to this struct.
It is initialized as 2 because both the parent thread and the child thread 
itself refer to it. This struct will not be released as long as ref_counter 
is not 0. Once a parent process or a child process exits, ref_counter is
decremented by 1.

Each process has a child_exist_status list which records the exit states
of all its child processes. 

Whenever a process P1 waits on another process P2, P1 will check whether 
the exit_status of process P2 is in the child_exit_status list of P1. If 
not, it means P2 is not a child process of P1 or P1 has waited P2 before.
Thus -1 is returned.

If process C is in the child_exit_status of process P, P calls sema_down on
the semaphore sema_wait in the exit_status of C. C calls sema_up on sema_wait
once it exits. Therefore, if C has already exited, sema_up is called already.
P can return from sema_down immediately and retrieve the exit_value of C.
If C has not exited, P has to wait until C exits before it can retrieve
this info.

An important step in our implementation is that once P has waited C, we 
will remove C from P's child_exit_status list. This is because the same
child can be waited only once. Hence next time P waits on C, it will not
be able to find C in its child_exit_status and will return -1.  

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We provided three layers to shield a false user-specified address:

  The first layer of shield is when reading the stack. Firstly, **esp is 
  checked at entering the syscall_handler(). Then each time we read a parameter
  from the stack, we check the virtual memory address pointed by *esp + offset.
  This is done by function valid_vaddr_range and get_argument.

  The second layer of shield is when trying to dereference a user-specified 
  pointer. We make sure that this pointer is 1) not NULL. 2) not in kernel 
  address space 3) already mapped. This is done by the function:
  valid_vaddr_range(const void * vaddr, unsigned size)

  The third layer of shield is when trying to use a file descriptor to index
  a file structure possessed by a thread. We check if the descriptor truly 
  belongs to the thread. This is done by the function:
  valid_file_handler (struct thread* thread, int fd)

Since all these functions are modularized and their interfaces could be 
utilized by all syscalls, we avoided the awkward situation that obscures 
the primary function of code in a morass of error-handling.

We enforced freeing all the temporarily allocated resources when a process
exits to prevent memory leakage. The exit() syscall finally calls to
process_exit(), and we did most the free operations inside process_exit()

  First current process's page directory is destroyed.

  Secondly we free the dynamically allocated exit_status structure. A process 
  has two identities: one is as parent, the other is as child. Our freeing 
  policy is to maintain a reference counter, whose value is initialized to 
  2 at creation. In both cases when a parent exits or a child exits, the 
  counter decreases by 1. Only when the reference counter becomes 0 shall 
  we free this exit_status structure.

  Thirdly, close all the opened files of the process and release file struct 
  array in thread struct. This is done by traversing the current thread's 
  file_handlers array.

  Fourthly, release the global file system lock if it is held by this process.

  The final step is to re-enable write to this executable file.

For an example, when write() is called, we first check if the stack pointer is
valid and then read from the stack the arguments. Then we check if the *buffer
pointer points to a valid address. Then we check if the file descriptor is 
possessed by the current thread. If any of these check fails, the current 
process calls _exit(-1) which frees all the recourses: page directory, open 
files,  exit_status, global file system lock. Finally we make the executable
file writable again.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The "exec" system call calls process_execute() and we handle this issue
primarily in process_excute(). 

We create a struct called "load_status", defined as follows:
struct load_status
  {
    struct semaphore sema_load;         /* Semaphore to sync on load() */
    bool load_success;                  /* True if load successfully */
    char *file_path;                    /* Path of the executable file */
    struct thread *parent_thread;       /* Pointer to the parent thread */
  };

Every time a thread calls "exec", it will create a load_status struct,
whose sema_load member is initialized as 0. The load_success member is
initialized as false, parent_thread member is initialized as current
thread and file_path is initialized the path of the executable file. In
process_execute, after calling "thread_create", current thread will wait
until the child process finishes loading, no matter succeeds or fails.
This is implemented by using sema_down(&ls.sema_load), here "ls" is an
instance of load_status. The load_status is passed to thread_create and
start_process via "void *aux".

Once the child process finishes loading, it will sema_up ls->sema_load.
So the parent process has to wait until the child process sema_up
ls->sema_load before it can continue to run. Since both the child
process and the parent process can access the load_status struct, the
parent thread can know the success/failure status from the load_sucess
variable in the load_status struct. If load_success is true, "exec" will
return pid of the child process. Otherwise, it will return -1.

If the child process loads successfully, it will generate its 
exit_status and insert it into the child_exit_status list of its parent
process. 

Otherwise when exit_status is created for the child process,
the ref_counter is initialized as 1. It will not be inserted into the 
child_exit_status list of the parent process. Hence, this exit_status
will be freed once the child process exits.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When P calls wait(C) before C exits, as shown in B5, it will sema_down
the sema_wait variable in the exit_status of C. C sema_up this
sema_wait variable only when it exits. In this way , we achieve
synchronization. Since each child has its own exit_status struct and 
each child has only one parent, we avoid race conditions. We do modify 
the child_exist_status list in this process and P has a lock for it.
Therefore, we do avoid race conditions.

When P calls wait(C) after C exits, since C already increased the
sema_wait variable when it exited, P will not wait on this when P calls
sema_down on sema_wait. In this way, we achieve synchronization. There
are no race conditions because of the same reason as before.

In the above two cases, P always exits after C. Therefore, when C exits,
it will not free its own exit_status because P might query it later (the 
ref_counter in C's exit_status is ont 0). When P exits, it will decrease
the ref_counter of its child processes and free exit_status of its child
processes whose ref_counter equals 0. Therefore, C's exit_status will be
freed when P exits. P will free its own exit_status if its parent has
exited. Each process will also release file resouces held by itself when
it exits. P will also destroy its page directory when it exits.

When P terminates without waiting, before C exits, it will decrease the 
ref_counter of each of its child processes. We avoid race conditions by 
adding a lock "counter_lock" in each child process' exit_status. P will
try to its own exit_status when it exits and it will succeed if its 
parent has already exited. P will release file resources held by itself
and destroy its page directory when it exits. C's exit_status, in this
case, will be freed when C exits because its ref_counter will decrease
to 0 at that time. C will also release its file resources and destroy
its page directory when it exits.

When P terminates without waiting, after C exits, it exits after C exits.
Therefore, C will not free its exit_status and P will free C's 
exit_status when P exits. Each process will still release its file 
resources and destroy its page directory when it exits.

The worst case we can think of is when P and C try to exit at the same 
time. This scenario might pose serious race problems when P and C both 
try to modify their ref_counters. We solve this by create a lock 
"counter_lock" in each process' exit_status struct. When a process wants
to modify the ref_counter of some process, it has to wait for the lock 
even if it tries to modify its own ref_counter. In this way, we solve the
"exiting at same time" problem.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We chose to verify the validity of a user provided pointer inside the syscall 
instead of in the page_fault exception handler. The steps was mentioned 
above: 1) the pointer is not NULL. 2) the address is not in kernel address 
space 3) the virtual address is already mapped.

This method is easy to implement but inferior in performance. Since it calls
pagedir_get_page, a software address translation mechanism, which is slower
than hardware translation in MMU.  If there are performance bottle necks, we 
would handles page fault in page_fault exception handler. But to make address
checking simple and as an integral, we just check it before every dereference.

//TODO: do you guys have some defense for our approach?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The current implementation is let each process maintains an array of file
pointers, which is allocated on demand. During open, we search from index
2 to find an empty space and allocate a new file descriptor. During read or 
write etc, which is done by basically searching the array with the file 
descriptor as index.

The advantage of this approach is that the searching performance of the file 
pointer array is good. Opening a new file and allocating a new file descriptor 
takes time of O(N). While reading, writing or closing a file and searching
through the processes open files takes time of O(1). 

The disadvantage of this scheme is that the spatial efficiency is not good. 
There might be a waste to set up an length 16 array if the process only opens
a few files, one the other side, if the process shall open a great many files,
we have to pay to overhead of lengthening the array when the file descriptors
run out.
 
>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
 
We used direct mapping from tid_t to pid_t, since each process of Pintos 
has only one thread. If the OS supports a process running multiple threads,
then we should change the direct map strategy. 


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
