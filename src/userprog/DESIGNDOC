     +--------------------------+
     | CS 140                   |
     | PROJECT 2: USER PROGRAMS |
     | DESIGN DOCUMENT          |
     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Song Han <songhan@stanford.edu>
Jinchao Ye <jcye@stanford.edu>
Bo Wang <bowang@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

FirstName LastName: contribution
FirstName LastName: contribution
FirstName LastName: contribution

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

--in <process.h>
  #define MAX_FILE_LENGTH 15   /* max length of file name */

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

The algorithm is as follows:
process_execute() will creat a thread that runs start_process().
Frist, the thread's name should be the first word of the command line,
thus we implement a function get_first_word() to extract the first word form 
the command line as the user program's name. It's limited to 15 characters.

Inside start_process() it calls load(*filename, **esp,...), we implement a 
procedure: argument_passing(const char *filename, void **esp)  to extract 
all the arguments from filename and set up the stack inside this fuction. 
The procedure is as follows:

--save a copy of the filename as cmd_line.
--*To ensure the elements of argv[] to be in the right order*, we iterates the 
   arguments twice: in the first run we get the argc, in the second run we 
   actually write them to stack. There's a trade-off of time and space.
   
--Each char is exactly 1 byte, find total number of bytes for the argument, 
   and find the total argument count (argc). That's done by find the number of
   tokens seperated by the delimiter " " in the cmd_line with strtok_r function.

--*To avoid overflowing the stack page*, we check if the total stack space 
   exceeds a page, must return false if so:
   if (mem_size + (argc + 1) * sizeof(char*) + sizeof(char**) + sizeof(int)
      > PGSIZE)   return false;		   

--ROUNRD_UP the cmd_line's length to multiples of 4 Byte as new length

--Decrease esp by length, set this as the start address of arg_data

--Decrease esp by the (number of arguments+1)*sizeof(char *). 
   -The reason for +1 is due to putting a zero at the end of the pointers.
   -Set this adress as arg_pointer

--Iterate the cmd_line again by strtok(), for each token
  -fill the argument's address into arg_pointer
  -fill the argument string into arg_data
  -update the arg_data by increasing the string length+1
  -update the arg_pointer by increasing it sizeof(char *)
  
--save the previous esp as argv, decrease esp by sizeof(char **)
  -fill in esp's value as the address of argv[0]
   
--decrease esp by sizeof(int)
  -fill in esp's value as argc
  
--decrease esp by sizeof(void *)
  -fill in esp's value as the fake return address 0

   
--
---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The difference between strtok_r() and strtok() is the way they save the 
pointer: strtok() saves the previous location implicitely, which is unsafe 
if preempted. Different process may use the same saved pointer.
However, strtok_r() saves the pointer explicitely by the argument 
char **save_ptr, which is per-thread, and it is safe to use it when multiple
threads are using it. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The Unix approach is safer. When processing the argument in the shell, we
are doing this in user mode. However, when processing the arguments in the
pintos OS, we are doing this in kernel mode. The code executed in the kernel
mode has more *privilleges* than in the user mode, such as changing the state 
of the current machine, therefore could lead to chances of being hacked by 
malicious command. 

The Unix approach also relieves the kernel the overhead of processing arguments,
therefore making the operating system more efficient. 


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

TODO: wholistic check
--<thread.h>:
   - added to struct thread:
    bool is_kernel;                     /* True if this is a kernel process */
    bool in_syscall;                    /* True if thread is in system call */

#ifdef USERPROG
    struct exit_status *exit_status;  /* Exit status of this thread */
    struct list child_exit_status;       /* List of child processes' exit status */
    struct lock list_lock;                  /* Lock on child exit status list  */
	
    struct file **file_handlers;          /* File handler array */
    int file_handlers_size;                /* Size of allocated file handlers */
    int file_handlers_num;              /* Num of current file handlers */
    struct file *process_file;            /* File of this current process */
#endif


    






>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The "exec" system call calls process_execute() and we handle this issue
primarity in process_excute(). 

We create a struct called "load_status", defined as following:
struct load_status
  {
    struct semaphore sema_load;         /* Semaphore to sync on load() */
    bool load_success;                  /* True if load successfully */
    char *file_path;                    /* Path of the executable file */
    struct thread *parent_thread;       /* Pointer to the parent thread */
  };

Every time a thread calls "exec", it will create a load_status struct,
whose sema_load member is initialized as 0. The load_success member is
initialized as false, parent_thread member is initialized as current
thread and file_path is initialized the path of the excutable file. In
process_execute, after calling "thread_create", current thread will wait
until the child process finishes loading, no matter succeeds or fails.
This is implemented by using sema_down(&ls.sema_load), here "ls" is an
instance of load_status. The load_status is passed to thread_create and
start_process via "void *aux".

Once the child process finishes loading, it will sema_up ls->sema_load.
So the parent process has to wait until the child process sema_up
ls->sema_load before it can continue to run. Since both the child
process and the parent process can access the load_status struct, the
parent thread can know the success/failure status from the load_sucess
variable in the load_status struct.

If the child process loads successfully, it will generate its 
exit_status and insert it into the child_exit_status list of its parent
process. Otherwise no exit_status will be created for the child process
and nothing will be inserted into the child_exit_status list of the
parent process.


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
